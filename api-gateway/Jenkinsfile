pipeline {
    agent any  // Defaulting to any agent
    tools {
        maven 'local_maven'
    }

    parameters {
        choice(
            choices: ['default', 'ubuntu', 'aws'],
            description: 'Select the machine to deploy to:',
            name: 'DEPLOY_MACHINE'
        )
        choice(
            choices: ['dev', 'pre-prod', 'prod'],
            description: 'Select the environment to run the script:',
            name: 'ENVIRONMENT'
        )
        string(
            defaultValue: 'main',
            description: 'Enter the branch name to checkout:',
            name: 'BRANCH_NAME'
        )
    }

    stages {
        stage('Agent Allocation') {
            steps {
                script {
                    def deployMachine = params.DEPLOY_MACHINE
                    if (deployMachine == 'ubuntu') {
                        node('ubuntu') {
                            // Continue with steps for 'ubuntu' agent
                        }
                    } else if (deployMachine == 'aws') {
                        node('aws') {
                            // Continue with steps for 'aws' agent
                        }
                    } else {
                        // Continue with any agent for 'default' option
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                node('master') { // Specify the label 'master' for checkout stage
                    script {
                        def branchName = params.BRANCH_NAME
                        checkout([$class: 'GitSCM', branches: [[name: branchName]], userRemoteConfigs: [[url: 'https://github.com/JyotiRanSwain/java-microservice.git']]])
                    }
                }
            }
        }

        stage('api-gateway') {
            steps {
                dir('api-gateway') {
                    node('master') { // Specify the label 'any' for api-gateway stage
                        script {
                            def environment = params.ENVIRONMENT
                            echo "Selected environment: $environment"
                            
                            // Run script based on the selected environment
                            if (environment == 'dev') {
                                sh 'mvn clean package -Dmaven.test.skip=true'
                            } else if (environment == 'pre-prod') {
                                echo 'pre-prod'
                            } else if (environment == 'prod') {
                                echo 'prod'
                            } else {
                                error "Unsupported environment: $environment"
                            }
                        }
                    }
                }
            }
        }

        stage('docker-compose') {
            steps {
                dir('docker-compose') {
                    node('master') { // Specify the label 'any' for docker-compose stage
                        script {
                            def environment = params.ENVIRONMENT
                            echo "Selected environment: $environment"
                            
                            // Run script based on the selected environment
                            if (environment == 'dev') {
                                sh 'docker-compose stop gateway'
                                sh 'docker-compose rm -f gateway'
                                sh 'docker-compose up -d gateway'
                            } else if (environment == 'pre-prod') {
                                echo 'pre-prod'
                            } else if (environment == 'prod') {
                                echo 'prod'
                            } else {
                                error "Unsupported environment: $environment"
                            }
                        }
                    }
                }
            }
        }
    }
}
